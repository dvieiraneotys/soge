pipeline {
  agent none
  stages {
    stage('Launch application'){
      agent { label 'master'}
      steps {
        sh 'docker-compose -f sockshop/enduserexperience/docker-compose.yml up -d'
      }
    }
    stage('Start NeoLoad infrastructure') {
      agent { label 'master' }
      steps {
        sh 'docker-compose -f neoload/lg/docker-compose.yml up -d'
        stash includes: 'neoload/lg/lg.yaml', name: 'LG'
        stash includes: 'neoload/test/enduserexperience.yaml', name: 'scenario'
        sh 'docker network connect enduserexperience_default docker-lg1'
      }
    }
    stage('End User Tests') {
      agent {
        dockerfile {
          args '--user root -v /tmp:/tmp --network=lg_default'
          dir 'neoload/controller'
        }
      }
      steps {
        git(branch: "master",
            url: 'http://jenkins:9090/git/tester/BaseProject.git')
        unstash 'LG'
        unstash 'scenario'
        script {
          neoloadRun executable: '/home/neoload/neoload/bin/NeoLoadCmd',
            project: "$WORKSPACE/BaseProject.nlp",
            testName: 'End User Nominal Test (build ${BUILD_NUMBER})',
            testDescription: 'Baseline End User load test',
            commandLineOption: "-project $WORKSPACE/neoload/test/enduserexperience.yaml -nlweb -loadGenerators $WORKSPACE/neoload/lg/lg.yaml -nlwebToken a8e8f0c5a4f90c02bfddcb6881e7f6811da26864879a7bd6",
            scenario: 'End User Nominal', sharedLicense: [server: 'NeoLoad Demo License', duration: 2, vuCount: 50]
        }
      }
    }
    stage('Stop Infrastructure') {
      parallel{
        stage('Stop NeoLoad infrastructure') {
          agent { label 'master' }
          steps {
            sh 'docker-compose -f neoload/lg/docker-compose.yml down'
          }
        }
        stage('Stop application'){
          agent { label 'master'}
          steps {
            sh 'docker-compose -f sockshop/enduserexperience/docker-compose.yml down'
          }
        }
      }
    }
    stage('Cleanup') {
      agent{ label 'master' }
      steps {
        archiveArtifacts 'results/**'
        archiveArtifacts 'Jenkinsfile'
        archiveArtifacts 'neoload/**'
        archiveArtifacts 'sockshop/enduserexperience/**'
        sh 'docker volume prune -f'
        cleanWs()
      }
    }
  }
}
